//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherInteractedTargetId;

    public static Entitas.IMatcher<GameEntity> InteractedTargetId {
        get {
            if (_matcherInteractedTargetId == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.InteractedTargetId);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherInteractedTargetId = matcher;
            }

            return _matcherInteractedTargetId;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public Code.Gameplay.Features.Input.InteractedTargetId interactedTargetId { get { return (Code.Gameplay.Features.Input.InteractedTargetId)GetComponent(GameComponentsLookup.InteractedTargetId); } }
    public int InteractedTargetId { get { return interactedTargetId.Value; } }
    public bool hasInteractedTargetId { get { return HasComponent(GameComponentsLookup.InteractedTargetId); } }

    public GameEntity AddInteractedTargetId(int newValue) {
        var index = GameComponentsLookup.InteractedTargetId;
        var component = (Code.Gameplay.Features.Input.InteractedTargetId)CreateComponent(index, typeof(Code.Gameplay.Features.Input.InteractedTargetId));
        component.Value = newValue;
        AddComponent(index, component);
        return this;
    }

    public GameEntity ReplaceInteractedTargetId(int newValue) {
        var index = GameComponentsLookup.InteractedTargetId;
        var component = (Code.Gameplay.Features.Input.InteractedTargetId)CreateComponent(index, typeof(Code.Gameplay.Features.Input.InteractedTargetId));
        component.Value = newValue;
        ReplaceComponent(index, component);
        return this;
    }

    public GameEntity RemoveInteractedTargetId() {
        RemoveComponent(GameComponentsLookup.InteractedTargetId);
        return this;
    }
}
