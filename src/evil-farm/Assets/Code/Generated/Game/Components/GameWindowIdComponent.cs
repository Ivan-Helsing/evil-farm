//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherWindowId;

    public static Entitas.IMatcher<GameEntity> WindowId {
        get {
            if (_matcherWindowId == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.WindowId);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherWindowId = matcher;
            }

            return _matcherWindowId;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public Code.Infrastructure.WindowBase.WindowId windowId { get { return (Code.Infrastructure.WindowBase.WindowId)GetComponent(GameComponentsLookup.WindowId); } }
    public Code.Infrastructure.WindowBase.WindowTypeId WindowId { get { return windowId.Value; } }
    public bool hasWindowId { get { return HasComponent(GameComponentsLookup.WindowId); } }

    public GameEntity AddWindowId(Code.Infrastructure.WindowBase.WindowTypeId newValue) {
        var index = GameComponentsLookup.WindowId;
        var component = (Code.Infrastructure.WindowBase.WindowId)CreateComponent(index, typeof(Code.Infrastructure.WindowBase.WindowId));
        component.Value = newValue;
        AddComponent(index, component);
        return this;
    }

    public GameEntity ReplaceWindowId(Code.Infrastructure.WindowBase.WindowTypeId newValue) {
        var index = GameComponentsLookup.WindowId;
        var component = (Code.Infrastructure.WindowBase.WindowId)CreateComponent(index, typeof(Code.Infrastructure.WindowBase.WindowId));
        component.Value = newValue;
        ReplaceComponent(index, component);
        return this;
    }

    public GameEntity RemoveWindowId() {
        RemoveComponent(GameComponentsLookup.WindowId);
        return this;
    }
}
