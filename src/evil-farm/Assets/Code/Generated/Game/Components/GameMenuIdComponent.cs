//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherMenuId;

    public static Entitas.IMatcher<GameEntity> MenuId {
        get {
            if (_matcherMenuId == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.MenuId);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherMenuId = matcher;
            }

            return _matcherMenuId;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public Code.Infrastructure.WindowBase.MenuId menuId { get { return (Code.Infrastructure.WindowBase.MenuId)GetComponent(GameComponentsLookup.MenuId); } }
    public int MenuId { get { return menuId.Value; } }
    public bool hasMenuId { get { return HasComponent(GameComponentsLookup.MenuId); } }

    public GameEntity AddMenuId(int newValue) {
        var index = GameComponentsLookup.MenuId;
        var component = (Code.Infrastructure.WindowBase.MenuId)CreateComponent(index, typeof(Code.Infrastructure.WindowBase.MenuId));
        component.Value = newValue;
        AddComponent(index, component);
        return this;
    }

    public GameEntity ReplaceMenuId(int newValue) {
        var index = GameComponentsLookup.MenuId;
        var component = (Code.Infrastructure.WindowBase.MenuId)CreateComponent(index, typeof(Code.Infrastructure.WindowBase.MenuId));
        component.Value = newValue;
        ReplaceComponent(index, component);
        return this;
    }

    public GameEntity RemoveMenuId() {
        RemoveComponent(GameComponentsLookup.MenuId);
        return this;
    }
}
