//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherParentId;

    public static Entitas.IMatcher<GameEntity> ParentId {
        get {
            if (_matcherParentId == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.ParentId);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherParentId = matcher;
            }

            return _matcherParentId;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public Code.Infrastructure.WindowBase.ParentId parentId { get { return (Code.Infrastructure.WindowBase.ParentId)GetComponent(GameComponentsLookup.ParentId); } }
    public int ParentId { get { return parentId.Value; } }
    public bool hasParentId { get { return HasComponent(GameComponentsLookup.ParentId); } }

    public GameEntity AddParentId(int newValue) {
        var index = GameComponentsLookup.ParentId;
        var component = (Code.Infrastructure.WindowBase.ParentId)CreateComponent(index, typeof(Code.Infrastructure.WindowBase.ParentId));
        component.Value = newValue;
        AddComponent(index, component);
        return this;
    }

    public GameEntity ReplaceParentId(int newValue) {
        var index = GameComponentsLookup.ParentId;
        var component = (Code.Infrastructure.WindowBase.ParentId)CreateComponent(index, typeof(Code.Infrastructure.WindowBase.ParentId));
        component.Value = newValue;
        ReplaceComponent(index, component);
        return this;
    }

    public GameEntity RemoveParentId() {
        RemoveComponent(GameComponentsLookup.ParentId);
        return this;
    }
}
